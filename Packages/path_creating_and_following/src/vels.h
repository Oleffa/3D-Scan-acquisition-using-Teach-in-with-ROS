/* Auto-generated by genmsg_cpp for file /home/visionlab/workspace/backpack/volksbotRT/msg/vels.msg */
#ifndef VOLKSBOTRT_MESSAGE_VELS_H
#define VOLKSBOTRT_MESSAGE_VELS_H
#include <string>
#include <vector>
#include <map>
#include <ostream>
#include "ros/serialization.h"
#include "ros/builtin_message_traits.h"
#include "ros/message_operations.h"
#include "ros/time.h"

#include "ros/macros.h"

#include "ros/assert.h"


namespace volksbotRT
{
template <class ContainerAllocator>
struct vels_ {
  typedef vels_<ContainerAllocator> Type;

  vels_()
  : left(0.0)
  , right(0.0)
  , id(0)
  {
  }

  vels_(const ContainerAllocator& _alloc)
  : left(0.0)
  , right(0.0)
  , id(0)
  {
  }

  typedef double _left_type;
  double left;

  typedef double _right_type;
  double right;

  typedef int64_t _id_type;
  int64_t id;


  typedef boost::shared_ptr< ::volksbotRT::vels_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::volksbotRT::vels_<ContainerAllocator>  const> ConstPtr;
  boost::shared_ptr<std::map<std::string, std::string> > __connection_header;
}; // struct vels
typedef  ::volksbotRT::vels_<std::allocator<void> > vels;

typedef boost::shared_ptr< ::volksbotRT::vels> velsPtr;
typedef boost::shared_ptr< ::volksbotRT::vels const> velsConstPtr;


template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const  ::volksbotRT::vels_<ContainerAllocator> & v)
{
  ros::message_operations::Printer< ::volksbotRT::vels_<ContainerAllocator> >::stream(s, "", v);
  return s;}

} // namespace volksbotRT

namespace ros
{
namespace message_traits
{
template<class ContainerAllocator> struct IsMessage< ::volksbotRT::vels_<ContainerAllocator> > : public TrueType {};
template<class ContainerAllocator> struct IsMessage< ::volksbotRT::vels_<ContainerAllocator>  const> : public TrueType {};
template<class ContainerAllocator>
struct MD5Sum< ::volksbotRT::vels_<ContainerAllocator> > {
  static const char* value() 
  {
    return "f87e64cfd56ef780d9b5e725006530e1";
  }

  static const char* value(const  ::volksbotRT::vels_<ContainerAllocator> &) { return value(); } 
  static const uint64_t static_value1 = 0xf87e64cfd56ef780ULL;
  static const uint64_t static_value2 = 0xd9b5e725006530e1ULL;
};

template<class ContainerAllocator>
struct DataType< ::volksbotRT::vels_<ContainerAllocator> > {
  static const char* value() 
  {
    return "volksbotRT/vels";
  }

  static const char* value(const  ::volksbotRT::vels_<ContainerAllocator> &) { return value(); } 
};

template<class ContainerAllocator>
struct Definition< ::volksbotRT::vels_<ContainerAllocator> > {
  static const char* value() 
  {
    return "float64 left\n\
float64 right\n\
int64 id\n\
\n\
";
  }

  static const char* value(const  ::volksbotRT::vels_<ContainerAllocator> &) { return value(); } 
};

template<class ContainerAllocator> struct IsFixedSize< ::volksbotRT::vels_<ContainerAllocator> > : public TrueType {};
} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

template<class ContainerAllocator> struct Serializer< ::volksbotRT::vels_<ContainerAllocator> >
{
  template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
  {
    stream.next(m.left);
    stream.next(m.right);
    stream.next(m.id);
  }

  ROS_DECLARE_ALLINONE_SERIALIZER;
}; // struct vels_
} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::volksbotRT::vels_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const  ::volksbotRT::vels_<ContainerAllocator> & v) 
  {
    s << indent << "left: ";
    Printer<double>::stream(s, indent + "  ", v.left);
    s << indent << "right: ";
    Printer<double>::stream(s, indent + "  ", v.right);
    s << indent << "id: ";
    Printer<int64_t>::stream(s, indent + "  ", v.id);
  }
};


} // namespace message_operations
} // namespace ros

#endif // VOLKSBOTRT_MESSAGE_VELS_H

