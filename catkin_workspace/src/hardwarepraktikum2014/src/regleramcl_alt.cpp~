#include "ros/ros.h"
#include "vels.h"
#include "nav_msgs/Odometry.h"
#include "tf/transform_listener.h"
#include "gio_path.h"
#include "math.h"
#include "volksbot/vels.h"
#include <sstream>

double x, y;
double angle;

void odomSubscriber(const nav_msgs::Odometry::ConstPtr& msg)
{
x = msg->pose.pose.position.x;
y = msg->pose.pose.position.y;
double  qx = msg->pose.pose.orientation.x;
double  qy = msg->pose.pose.orientation.y;
double  qz = msg->pose.pose.orientation.z;
double  qw = msg->pose.pose.orientation.w;
 angle = atan2(2 * ( qw * qz + qx * qy),1 - 2 * ( qz * qz + qy * qy));
}

int main(int argc, char **argv)
{
  ros::init(argc, argv, "talker");
  ros::NodeHandle node;
  ros::Publisher chatter_pub = node.advertise<volksbot::vels>("Vel", 1000);
  ros::Rate loop_rate(10);
  tf::TransformListener listener;  
  CGioController cgio;
  cgio.getPathFromFile("/home/oleffa/catkin_ws/bagfiles/014/path0.dat");
  cgio.setCurrentVelocity(10);
  double u = 0.0;
  double w = 0.0;
  double vleft = 0.0;
  double vright = 0.0;
 
  while (ros::ok())
  {

    tf::StampedTransform transform;

    try{
      listener.lookupTransform("/map","/base_link",ros::Time(0),transform);
    }
    catch(tf::TransformException &ex){
      ROS_ERROR("%s",ex.what());
    }
    x = transform.getOrigin().x();
    y = transform.getOrigin().y();
    angle = atan2(2*(transform.getRotation().w()*transform.getRotation().z()),1-2*(transform.getRotation().z()*transform.getRotation().z()));
	
	ROS_INFO("X::%f\tY::%f\tANGLE::%f\t",x,y,angle);

    cgio.setPose(x,y,angle);
    cgio.getNextState(u,w,vleft,vright,1);
    volksbot::vels msg;
    msg.left = -vleft;
    msg.right = -vright;
    chatter_pub.publish(msg);
    ros::spinOnce();
    loop_rate.sleep();

  }
  return 0;
}
