// $Id: config.hpp 274 2009-08-27 13:48:12Z rs $

#ifndef RIVLIB_CONFIG_HPP
#define RIVLIB_CONFIG_HPP

#include <string>
#include <cctype>
#include <istream>
#include <string>
#include <istream>
#include <ostream>

#if !defined(SCANLIB_BIGEND_HOST)
#   include <stdio.h>
#   if defined(__GNU_LIBRARY__)
#       include <endian.h>
#       if (__BYTE_ORDER == __BIG_ENDIAN)
#           define SCANLIB_BIGEND_HOST
#       endif
#   endif
#endif

#ifdef _WIN32
#   ifdef RIVLIB_SHARED
#       ifdef RIVLIB_SOURCE
#           define RIVLIB_API __declspec(dllexport)
#           ifdef _MSC_VER
#               define RTL_API __declspec(dllimport)
#           else
#               define RTL_API
#           endif
#       else
#           define RIVLIB_API __declspec(dllimport)
#           define RTL_API __declspec(dllimport)
#       endif
#   else
#       define RIVLIB_API
#       define RTL_API
#   endif
#else
#   define RTL_API
#   define RIVLIB_API
#endif

#if defined(__MINGW32__) || defined(__GNUC__)
#include <stdint.h>
namespace scanlib {
    using ::uint8_t;
    using ::int8_t;
    using ::uint16_t;
    using ::int16_t;
    using ::uint32_t;
    using ::int32_t;
    using ::uint64_t;
    using ::int64_t;
    using ::uintmax_t;
    using ::intmax_t;
    typedef float float32_t;
}
#   endif

#if defined(_MSC_VER)
namespace scanlib {
    typedef unsigned char    uint8_t;
    typedef signed   char     int8_t;
    typedef unsigned short  uint16_t;
    typedef          short   int16_t;
    typedef unsigned int    uint32_t;
    typedef          int     int32_t;
    typedef unsigned __int64  uint64_t;
    typedef          __int64   int64_t;
    typedef unsigned __int64 uintmax_t;
    typedef          __int64  intmax_t;
    typedef float            float32_t;
}
#endif

namespace scanlib {

inline std::ostream&
operator<<(std::ostream& out, uint8_t arg)
{ unsigned t = arg; out << t; return out; }

inline std::ostream&
operator<<(std::ostream& out, int8_t arg)
{ int t = arg; out << t; return out; }

inline std::istream&
operator>>(std::istream& in, uint8_t& arg)
{ unsigned int t; in >> t; arg = t; return in; }

inline std::istream&
operator>>(std::istream& in, int8_t& arg)
{ signed int t; in >> t; arg = t; return in; }

} // scanlib

namespace std {

template<class T, class charT, class traits>
std::basic_istream<charT, traits>&
operator>>(std::basic_istream<charT, traits>& in, const T& arg)
{
    typename std::basic_istream<charT, traits>::sentry ok(in);
    if (ok) {
        T t;
        in >> t;
        if (t != arg)
            in.setstate(std::ios::failbit);
    }
    return in;
}

template<class charT, class traits>
std::basic_istream<charT, traits>&
operator>>(std::basic_istream<charT, traits>& in, const std::basic_string<charT>& arg)
{
    typename std::basic_istream<charT, traits>::sentry ok(in);
    if(ok){
        charT c;
        typename std::basic_string<charT>::size_type n=0;
        while(n<arg.size() && in.get(c)) {
            if (arg[n++] != c) {
                in.putback(c);
                break;
            }
        }
        if (n<arg.size())
            in.setstate(std::ios::failbit);
    }
    return in;
}

template<class charT, class traits>
std::basic_istream<charT, traits>&
operator>>(std::basic_istream<charT, traits>& in, const charT* arg)
{
    return operator>>(in,std::basic_string<charT>(arg));
}

template<class charT, class traits>
std::basic_istream<charT, traits>&
endl(std::basic_istream<charT, traits>& in)
{
    typename std::basic_istream<charT, traits>::sentry ok(in, true);
    if (ok) {
        charT c;
        while(in.get(c)) {
            if (!isspace(c)) {
                in.putback(c);
                in.setstate(std::ios::failbit);
                break;
            }
            else if (c == '\n')
                break;
        }
    }
    return in;
}
} // namespace std

#define RIVLIB_STRING_HELPER2(a) #a
#define RIVLIB_STRING_HELPER1(a) RIVLIB_STRING_HELPER2(a)

#ifndef SVN_VERSION
#   define SVN_VERSION UNKNOWN
#endif
#define RIVLIB_BUILD_VERSION RIVLIB_STRING_HELPER1(SVN_VERSION)

#ifndef PRJ_VERSION
#   define PRJ_VERSION UNKNOWN
#endif
#define RIVLIB_VERSION RIVLIB_STRING_HELPER1(PRJ_VERSION)

#ifndef BUILD_TAG
#   define BUILD_TAG UNKNOWN
#endif
#define RIVLIB_BUILD_TAG RIVLIB_STRING_HELPER1(BUILD_TAG)

namespace scanlib {
    extern const std::string version;
    extern const std::string build_version;
    extern const std::string build_tag;
    extern const std::string ridataspec;
}

#endif // RIVLIB_CONFIG_HPP
