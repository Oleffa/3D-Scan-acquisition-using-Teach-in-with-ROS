// $Id: pointcloud.hpp 502 2010-10-19 07:34:11Z rs $

#ifndef POINTCLOUD_HPP
#define POINTCLOUD_HPP

//! \file pointcloud.hpp
//! The pointcloud extractor and helper classes.


#include <riegl/config.hpp>
#include <riegl/ridataspec.hpp>
#include <riegl/detail/clockcomp.hpp>
#include <riegl/compressed.hpp>

#include <string>
#include <ostream>
#include <vector>
#include <limits>

namespace scanlib {

//! geometric data and attributes of a point
/*! This class holds the geometric x,y,z coordinates of a measured
    point and its attributes such as amplitude and reflectance.
 */
class RIVLIB_API target
{
public:
    target()
    {
        vertex[0] = vertex[1] = vertex[2] = 0.0;
        time        = 0;
        amplitude   = 0;
        reflectance = 0;
        deviation   = 0;
        background_radiation = std::numeric_limits<float>::quiet_NaN();
        is_sw       = false;
        is_high_power   = false;
        is_rising_edge  = false;
        is_pps_locked   = false;
        facet       = 0;
    }

    //! x-y-z coordinates
    /*! Cartesian coordinates in scanners own coordinate system.
     */
    float vertex[3];

    //! time stamp in [s]
    /*! The epoch (i.e. where time equals zero) depends on a flag
        that has to be supplied in the constructor of the pointcloud object.
     */
    double time;

    //! relative amplitude in [dB]
    /* This is the ratio of the received power to the power received at
       the detection limit expressed in dB.
     */
    float amplitude;

    //! relative reflectance in [dB]
    /*! This is the ratio of the received power to the power that would
        be received from a white diffuse target at the same distance
        expressed in dB. The reflectance represents a range independent
        property of the target.  The surface normal of this target is assumed
        to be in parallel to the laser beam direction.
     */
    float reflectance;

    //! a measure of pulse shape distortion
    /*! A larger value for deviation indicates larger distortion.
      */
    float deviation;

    //! a measure of background radiation
    /*! A measure of background radiation. This information is optional.
        For instruments that do not deliver this value, the field is set
        to NaN.
     */
    float background_radiation;

    //! INTERNAL ONLY
    bool is_sw;             // generated by software full wave analysis

    //! INTERNAL ONLY
    bool is_high_power;     // high power channel flag

    //! INTERNAL ONLY
    bool is_rising_edge;    // edge flag

    //! time is a valid pps time
    bool is_pps_locked;

    //! INTERNAL ONLY
    unsigned facet;   // facet number
};

//!\brief pointcloud class
//!\details The pointcloud class combines several (undocumented) raw basic
//! packets into meaningful XYZ data with calibration already applied.
//! This makes the pointcloud class the main access point to data for client
//! applications. The class provides several virtual functions that the
//! client application is expected to override.
//! For every laser echo discovered in the raw data stream from the scanning
//! device an invocation of the on_echo_transformed is done. The function
//! provides as a parameter the type of echo. Each echo unambiguously belongs
//! to one of the possible classes of type echo_type. Please note that for
//! specifying all echoes that are farthest away you need to look for both
//! single _and_ last echoes. Similar reasoning is for closest echoes. I.e.
//! specifying only last will give you the echo points that are farthest away
//! but only if they are part of multi-return.
//! The time reference for the time stamps are user selectable. PPS time stamps
//! from a GPS receiver or internal time of the scanner device can be
//! choosen.
//! The point data is accesible through the targets member variable. This
//! variable is an array that always holds all echoes that belong to the
//! same laser shot. The echo that belongs to the current call to
//! on_echo_transformed is always accesible by means of the variable
//! target_count. I.e to access the top of the array specify
//! targets[target_count-1]. This design makes it possible for the client
//! application to either act on each echo separately or evaluate all
//! echoes that belong to a laser shot at once when the last echo for this
//! shot is seen. The targets array is reset to empty with each new laser shot.
class RIVLIB_API pointcloud
    //:  virtual public basic_packets
    : public compressed_packets
{
public:
    //! the echo type classifications, each echo belongs to exactly one class
    typedef enum { single, first, interior, last, none } echo_type;

    //! the value of PI
    static const double pi;

    //! constructor
    //!\param sync_to_pps_ use external time reference for time
    pointcloud(bool sync_to_pps_ = false);
    //! constructor
    //!\param out write pointcloud data in ASCII to a stream
    //!\param sync_to_pps_ use external time reference for time
    pointcloud(std::ostream& out, bool sync_to_pps_ = false);
    virtual ~pointcloud() {}

    bool sync_to_pps;       //!< flag indicating the time reference to use
    double time;            //!< the timestamp of the current echo [sec]

    //! all targets belonging to the last laser shot
    std::vector<target> targets;
    typedef std::vector<target>::size_type target_count_type;
    //! the number of targets belonging to the last laser shot
    target_count_type target_count;
    //! beam direction of current shot (unity direction vector)
    double beam_direction[3];
    //! (virtual) beam origin of current shot (unit is meter)
    double beam_origin[3];

    // instrument descriptors
    std::string serial;  //!< scanner serial number
    std::string type_id; //!< scanner type
    std::string build;   //!< scanner build id

protected:

    //! callback when a complete laser point is available
    //! the point information is accesible from the targets member
    //!\param echo the classification of the last echo
    virtual void on_echo_transformed(echo_type echo);

    //! callback to indicate that at least two regular pps pulses have been seen
    //!\param none
    virtual void on_pps_synchronized();

    //! callback to indicate that pps pulses have stopped
    //!\param none
    virtual void on_pps_sync_lost();

    // overridden
    void on_header(const header<iterator_type>& h); //!< INTERNAL ONLY
    void on_units(const units<iterator_type>& arg); //!< INTERNAL ONLY
    void on_units_1(const units_1<iterator_type>& arg); //!< INTERNAL ONLY
    void on_device_geometry(const device_geometry<iterator_type>& arg); //!< INTERNAL ONLY
    void on_pps_sync(const pps_sync<iterator_type>& arg); //!< INTERNAL ONLY
    void on_pps_sync_ext(const pps_sync_ext<iterator_type>& arg); //!< INTERNAL ONLY
    void on_laser_shot(const laser_shot<iterator_type>& arg); //!< INTERNAL ONLY
    void on_laser_shot_1angle(const laser_shot_1angle<iterator_type>& arg); //!< INTERNAL ONLY
    void on_laser_shot_2angles(const laser_shot_2angles<iterator_type>& arg); //!< INTERNAL ONLY
    void on_laser_shot_2angles_rad(const laser_shot_2angles_rad<iterator_type>& arg); //!< INTERNAL ONLY
    void on_laser_shot_6angles(const laser_shot_6angles<iterator_type>& arg); //!< INTERNAL ONLY
    void on_echo(const echo<iterator_type>& arg); //!< INTERNAL ONLY
    void on_laser_echo(const laser_echo<iterator_type>& arg); //!< INTERNAL ONLY
    void on_laser_echo_qual(const laser_echo_qual<iterator_type>& arg); //!< INTERNAL ONLY
    void on_laser_echo_sw(const laser_echo_sw<iterator_type>& arg); //!< INTERNAL ONLY
    void on_line_stop(const line_stop<iterator_type>& arg); //!< INTERNAL ONLY
    void on_frame_stop(const frame_stop<iterator_type>& arg); //!< INTERNAL ONLY
    void on_meas_stop(const meas_stop<iterator_type>& arg); //!< INTERNAL ONLY

    std::ostream* out;
    bool header_written;

private:
    void init(); //!< INTERNAL ONLY
    void calc_shot_constants
    (
        unsigned facet
        , const double sin_line
        , const double cos_line
        , const double sin_frame
        , const double cos_frame
    ); //!< INTERNAL ONLY

    void send_first_or_interior(); //!< INTERNAL ONLY
    void send_single_or_last(); //!< INTERNAL ONLY

    void calc_time
    (
        uint32_t t
    ); //!< INTERNAL ONLY

    void update_pps
    (
        uint32_t t
        , uint32_t T
    ); //!< INTERNAL ONLY

    void pseudo_echo
    (
        double r
    ); //!< INTERNAL ONLY

    // zero angles for 2d and 1d "scans"
    double sin_line_0; //!< INTERNAL ONLY
    double cos_line_0; //!< INTERNAL ONLY
    double sin_frame_0; //!< INTERNAL ONLY
    double cos_frame_0; //!< INTERNAL ONLY

    // per instrument constants
    double range_unit; //!< INTERNAL ONLY
  //double time_unit;
    double ampl_unit; //!< INTERNAL ONLY
    double refl_unit; //!< INTERNAL ONLY

    unsigned num_facets; //!< INTERNAL ONLY
    unsigned cur_facet;  //!< INTERNAL ONLY
    unsigned line_circle_count; //!< INTERNAL ONLY
    int line_modul; //!< INTERNAL ONLY
    int line_offset; //!< INTERNAL ONLY
    double line_unit_half; //!< INTERNAL ONLY

    double frame_unit_half; //!< INTERNAL ONLY

    double a[4][3]; //!< INTERNAL ONLY
    double b[4][3]; //!< INTERNAL ONLY
    double c[4][3]; //!< INTERNAL ONLY
    double d[4]; //!< INTERNAL ONLY

    double l[3]; //!< INTERNAL ONLY
    double f[3]; //!< INTERNAL ONLY
    double O[3]; //!< INTERNAL ONLY

    // per laser shot constants
    //double R0[3]; //!< INTERNAL ONLY
    float background_radiation; //!< INTERNAL ONLY

    // conversion from systime to pps time domain
    bool single_or_last_initialized; //!< INTERNAL ONLY
    detail::clock_compensator pps_clock; //!< INTERNAL ONLY

    // discard echoes we get before we have seen a shot
    bool shot_seen;

    // not copyable
    pointcloud(const pointcloud&);
};

} // namespace scanlib

#endif // POINTCLOUD_HPP
